name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:
  schedule:
    # Run weekly security audit
    - cron: '0 0 * * 0'

env:
  PYTHON_VERSION: '3.11'
  DOCKER_BUILDKIT: 1
  FORCE_COLOR: 1

jobs:
  # Security and dependency checks
  security:
    name: Security Scan
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

    - name: Run safety check for Python dependencies
      run: |
        pip install safety
        safety check --output json --save-json safety-report.json || true

    - name: Upload safety report
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: safety-report
        path: safety-report.json

  # Dependency review for PRs
  dependency-review:
    name: Dependency Review
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Dependency Review
      uses: actions/dependency-review-action@v4
      with:
        fail-on-severity: moderate
        allow-licenses: MIT, Apache-2.0, BSD-2-Clause, BSD-3-Clause, ISC, PostgreSQL

  # Comprehensive testing
  test:
    name: Test with Python ${{ matrix.python-version }} (${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ['3.9', '3.10', '3.11', '3.12']
        exclude:
          # Reduce matrix size for faster CI
          - os: windows-latest
            python-version: '3.9'
          - os: macos-latest
            python-version: '3.9'
          - os: windows-latest
            python-version: '3.12'
          - os: macos-latest
            python-version: '3.12'

    services:
      # Start a Docker daemon for testing Docker operations
      docker:
        image: docker:dind
        options: >-
          --privileged
          --network=host
          -v /var/run/docker.sock:/var/run/docker.sock
        env:
          DOCKER_TLS_CERTDIR: ""

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip'

    - name: Install system dependencies (Linux)
      if: runner.os == 'Linux'
      run: |
        sudo apt-get update
        sudo apt-get install -y docker-compose-plugin git

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip setuptools wheel
        pip install -e .[dev,test]

    - name: Run unit tests
      run: |
        pytest tests/unit/ -v --tb=short --cov=filesystem_mcp --cov-report=xml --cov-report=term-missing

    - name: Run integration tests
      run: |
        pytest tests/integration/ -v --tb=short --cov=filesystem_mcp --cov-report=xml --cov-report=term-missing --cov-append
      env:
        DOCKER_AVAILABLE: ${{ runner.os == 'Linux' }}

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/'))
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        file: ./coverage.xml
        flags: ${{ matrix.os }}-${{ matrix.python-version }}
        fail_ci_if_error: false

    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results-${{ matrix.os }}-${{ matrix.python-version }}
        path: |
          test-results/
          htmlcov/

  # Code quality and linting
  quality:
    name: Code Quality
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
        cache: 'pip'

    - name: Install quality tools
      run: |
        python -m pip install --upgrade pip
        pip install pre-commit ruff mypy bandit safety

    - name: Run pre-commit hooks
      run: |
        pre-commit run --all-files --show-diff-on-failure

    - name: Run security linting with bandit
      run: |
        bandit -r src/ -f json -o bandit-report.json || true

    - name: Upload bandit report
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: bandit-report
        path: bandit-report.json

  # Performance testing
  performance:
    name: Performance Tests
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
        cache: 'pip'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .[dev,test]

    - name: Run performance tests
      run: |
        pytest tests/ -k "performance or bulk" --tb=short --durations=10

  # Build DXT package
  build-dxt:
    name: Build DXT Package
    runs-on: ubuntu-latest
    needs: [test, quality]
    steps:
    - uses: actions/checkout@v4

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'

    - name: Install MCPB
      run: npm install -g @anthropic-ai/mcpb

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
        cache: 'pip'

    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .

    - name: Validate DXT manifest
      run: |
        cd dxt
        mcpb validate manifest.json

    - name: Build DXT package
      run: |
        cd dxt
        mcpb pack . ../dist/filesystem-mcp.dxt

    - name: Upload DXT package
      uses: actions/upload-artifact@v4
      with:
        name: dxt-package
        path: dist/filesystem-mcp.dxt
        retention-days: 30

  # Build and publish
  release:
    name: Release
    needs: [test, quality, build-dxt]
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/v'))
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
        cache: 'pip'

    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine

    - name: Build Python package
      run: python -m build

    - name: Publish to PyPI
      if: startsWith(github.ref, 'refs/tags/v')
      uses: pypa/gh-action-pypi-publish@release/v1
      env:
        PYPI_API_TOKEN: ${{ secrets.PYPI_API_TOKEN }}
      with:
        user: __token__
        password: ${{ env.PYPI_API_TOKEN }}
        skip_existing: true

    - name: Login to Docker Hub
      if: startsWith(github.ref, 'refs/tags/v')
      uses: docker/login-action@v3
      env:
        DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
        DOCKERHUB_PASSWORD: ${{ secrets.DOCKERHUB_PASSWORD }}
      with:
        username: ${{ env.DOCKERHUB_USERNAME }}
        password: ${{ env.DOCKERHUB_PASSWORD }}

    - name: Build and Push Docker Image
      if: startsWith(github.ref, 'refs/tags/v')
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: |
          ${{ env.DOCKERHUB_USERNAME }}/filesystem-mcp:latest
          ${{ env.DOCKERHUB_USERNAME }}/filesystem-mcp:${{ github.ref_name }}
        platforms: linux/amd64,linux/arm64

    - name: Download DXT package
      uses: actions/download-artifact@v4
      with:
        name: dxt-package
        path: dist/

    - name: Create GitHub Release
      if: startsWith(github.ref, 'refs/tags/v')
      uses: softprops/action-gh-release@v2
      with:
        files: |
          dist/*.whl
          dist/*.tar.gz
          dist/*.dxt
        generate_release_notes: true
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # Update wiki (if wiki exists)
  wiki:
    name: Update Wiki
    needs: [release]
    if: startsWith(github.ref, 'refs/tags/v')
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
      with:
        repository: ${{ github.repository }}.wiki
        path: wiki
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Update wiki with release info
      run: |
        echo "# Release ${{ github.ref_name }}" > wiki/${{ github.ref_name }}.md
        echo "" >> wiki/${{ github.ref_name }}.md
        echo "Released on $(date)" >> wiki/${{ github.ref_name }}.md
        echo "" >> wiki/${{ github.ref_name }}.md
        echo "## Changes" >> wiki/${{ github.ref_name }}.md
        echo "See [CHANGELOG.md](https://github.com/${{ github.repository }}/blob/main/CHANGELOG.md)" >> wiki/${{ github.ref_name }}.md

    - name: Commit wiki changes
      run: |
        cd wiki
        git config user.name "github-actions[bot]"
        git config user.email "github-actions[bot]@users.noreply.github.com"
        git add .
        git commit -m "Update wiki for release ${{ github.ref_name }}" || true
        git push || true
